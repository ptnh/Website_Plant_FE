{"ast":null,"code":"'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into into [dir, root, basename, name, ext]\nvar splitWindowsRe = /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\nvar win32 = {};\nfunction win32SplitPath(filename) {\n  return splitWindowsRe.exec(filename).slice(1);\n}\nwin32.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[1],\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\n\n// Split a filename into [dir, root, basename, name, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\nvar posix = {};\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\nposix.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[1],\n    dir: allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\nif (isWindows) module.exports = win32.parse;else /* posix */\n  module.exports = posix.parse;\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;","map":{"version":3,"names":["isWindows","process","platform","splitWindowsRe","win32","win32SplitPath","filename","exec","slice","parse","pathString","TypeError","allParts","length","root","dir","base","ext","name","splitPathRe","posix","posixSplitPath","module","exports"],"sources":["E:/ssms/tiktok/node_modules/path-parse/index.js"],"sourcesContent":["'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into into [dir, root, basename, name, ext]\nvar splitWindowsRe =\n    /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\n\nvar win32 = {};\n\nfunction win32SplitPath(filename) {\n  return splitWindowsRe.exec(filename).slice(1);\n}\n\nwin32.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[1],\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\n\n\n\n// Split a filename into [dir, root, basename, name, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\nposix.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  \n  return {\n    root: allParts[1],\n    dir: allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3],\n  };\n};\n\n\nif (isWindows)\n  module.exports = win32.parse;\nelse /* posix */\n  module.exports = posix.parse;\n\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO;;AAE5C;AACA,IAAIC,cAAc,GACd,4HAA4H;AAEhI,IAAIC,KAAK,GAAG,CAAC,CAAC;AAEd,SAASC,cAAcA,CAACC,QAAQ,EAAE;EAChC,OAAOH,cAAc,CAACI,IAAI,CAACD,QAAQ,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;AAC/C;AAEAJ,KAAK,CAACK,KAAK,GAAG,UAASC,UAAU,EAAE;EACjC,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,MAAM,IAAIC,SAAS,CACf,+CAA+C,GAAG,OAAOD,UAC7D,CAAC;EACH;EACA,IAAIE,QAAQ,GAAGP,cAAc,CAACK,UAAU,CAAC;EACzC,IAAI,CAACE,QAAQ,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACtC,MAAM,IAAIF,SAAS,CAAC,gBAAgB,GAAGD,UAAU,GAAG,GAAG,CAAC;EAC1D;EACA,OAAO;IACLI,IAAI,EAAEF,QAAQ,CAAC,CAAC,CAAC;IACjBG,GAAG,EAAEH,QAAQ,CAAC,CAAC,CAAC,KAAKA,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzEQ,IAAI,EAAEJ,QAAQ,CAAC,CAAC,CAAC;IACjBK,GAAG,EAAEL,QAAQ,CAAC,CAAC,CAAC;IAChBM,IAAI,EAAEN,QAAQ,CAAC,CAAC;EAClB,CAAC;AACH,CAAC;;AAID;AACA;AACA,IAAIO,WAAW,GACX,6DAA6D;AACjE,IAAIC,KAAK,GAAG,CAAC,CAAC;AAGd,SAASC,cAAcA,CAACf,QAAQ,EAAE;EAChC,OAAOa,WAAW,CAACZ,IAAI,CAACD,QAAQ,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;AAC5C;AAGAY,KAAK,CAACX,KAAK,GAAG,UAASC,UAAU,EAAE;EACjC,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,MAAM,IAAIC,SAAS,CACf,+CAA+C,GAAG,OAAOD,UAC7D,CAAC;EACH;EACA,IAAIE,QAAQ,GAAGS,cAAc,CAACX,UAAU,CAAC;EACzC,IAAI,CAACE,QAAQ,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACtC,MAAM,IAAIF,SAAS,CAAC,gBAAgB,GAAGD,UAAU,GAAG,GAAG,CAAC;EAC1D;EAEA,OAAO;IACLI,IAAI,EAAEF,QAAQ,CAAC,CAAC,CAAC;IACjBG,GAAG,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7BQ,IAAI,EAAEJ,QAAQ,CAAC,CAAC,CAAC;IACjBK,GAAG,EAAEL,QAAQ,CAAC,CAAC,CAAC;IAChBM,IAAI,EAAEN,QAAQ,CAAC,CAAC;EAClB,CAAC;AACH,CAAC;AAGD,IAAIZ,SAAS,EACXsB,MAAM,CAACC,OAAO,GAAGnB,KAAK,CAACK,KAAK,CAAC,KAC1B;EACHa,MAAM,CAACC,OAAO,GAAGH,KAAK,CAACX,KAAK;AAE9Ba,MAAM,CAACC,OAAO,CAACH,KAAK,GAAGA,KAAK,CAACX,KAAK;AAClCa,MAAM,CAACC,OAAO,CAACnB,KAAK,GAAGA,KAAK,CAACK,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}